// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataNode.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sufs {

  /// <summary>Holder for reflection information generated from DataNode.proto</summary>
  public static partial class DataNodeReflection {

    #region Descriptor
    /// <summary>File descriptor for DataNode.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataNodeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5EYXRhTm9kZS5wcm90bxIEc3VmcyJGCgxXcml0ZVJlcXVlc3QSDwoHYmxv",
            "Y2tJRBgBIAEoBRIRCglibG9ja1NpemUYAiABKAISEgoKZGF0YU5vZGVJRBgD",
            "IAMoCSIhCg1Xcml0ZVJlc3BvbnNlEhAKCHJlc3BvbnNlGAEgASgIIkgKDUhl",
            "YWx0aFJlcXVlc3QSDwoHYmxvY2tJRBgBIAEoBRIRCglibG9ja1NpemUYAiAB",
            "KAISEwoLaW5zdHJ1Y3Rpb24YAyABKAgiIgoOSGVhbHRoUmVzcG9uc2USEAoI",
            "cmVzcG9uc2UYASABKAgiSgoQUmVwbGljYXRlUmVxdWVzdBIPCgdibG9ja0lE",
            "GAEgASgFEhEKCWJsb2NrU2l6ZRgCIAEoAhISCgpkYXRhTm9kZUlEGAMgAygJ",
            "IiUKEVJlcGxpY2F0ZVJlc3BvbnNlEhAKCHJlc3BvbnNlGAEgASgIMkYKDEZp",
            "bGVIYW5kbGluZxI2CglXcml0ZUZpbGUSEi5zdWZzLldyaXRlUmVxdWVzdBoT",
            "LnN1ZnMuV3JpdGVSZXNwb25zZSIAMlIKFERhdGFOb2RlSGVhbHRoQ2VudGVy",
            "EjoKC0hlYWx0aENoZWNrEhMuc3Vmcy5IZWFsdGhSZXF1ZXN0GhQuc3Vmcy5I",
            "ZWFsdGhSZXNwb25zZSIAMlEKClBpcGVsaW5pbmcSQwoOUmVwbGljYXRlQmxv",
            "Y2sSFi5zdWZzLlJlcGxpY2F0ZVJlcXVlc3QaFy5zdWZzLlJlcGxpY2F0ZVJl",
            "c3BvbnNlIgBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sufs.WriteRequest), global::Sufs.WriteRequest.Parser, new[]{ "BlockID", "BlockSize", "DataNodeID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sufs.WriteResponse), global::Sufs.WriteResponse.Parser, new[]{ "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sufs.HealthRequest), global::Sufs.HealthRequest.Parser, new[]{ "BlockID", "BlockSize", "Instruction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sufs.HealthResponse), global::Sufs.HealthResponse.Parser, new[]{ "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sufs.ReplicateRequest), global::Sufs.ReplicateRequest.Parser, new[]{ "BlockID", "BlockSize", "DataNodeID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sufs.ReplicateResponse), global::Sufs.ReplicateResponse.Parser, new[]{ "Response" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WriteRequest : pb::IMessage<WriteRequest> {
    private static readonly pb::MessageParser<WriteRequest> _parser = new pb::MessageParser<WriteRequest>(() => new WriteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sufs.DataNodeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteRequest(WriteRequest other) : this() {
      blockID_ = other.blockID_;
      blockSize_ = other.blockSize_;
      dataNodeID_ = other.dataNodeID_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteRequest Clone() {
      return new WriteRequest(this);
    }

    /// <summary>Field number for the "blockID" field.</summary>
    public const int BlockIDFieldNumber = 1;
    private int blockID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockID {
      get { return blockID_; }
      set {
        blockID_ = value;
      }
    }

    /// <summary>Field number for the "blockSize" field.</summary>
    public const int BlockSizeFieldNumber = 2;
    private float blockSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BlockSize {
      get { return blockSize_; }
      set {
        blockSize_ = value;
      }
    }

    /// <summary>Field number for the "dataNodeID" field.</summary>
    public const int DataNodeIDFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_dataNodeID_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> dataNodeID_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DataNodeID {
      get { return dataNodeID_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockID != other.BlockID) return false;
      if (BlockSize != other.BlockSize) return false;
      if(!dataNodeID_.Equals(other.dataNodeID_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockID != 0) hash ^= BlockID.GetHashCode();
      if (BlockSize != 0F) hash ^= BlockSize.GetHashCode();
      hash ^= dataNodeID_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BlockID);
      }
      if (BlockSize != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BlockSize);
      }
      dataNodeID_.WriteTo(output, _repeated_dataNodeID_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockID);
      }
      if (BlockSize != 0F) {
        size += 1 + 4;
      }
      size += dataNodeID_.CalculateSize(_repeated_dataNodeID_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteRequest other) {
      if (other == null) {
        return;
      }
      if (other.BlockID != 0) {
        BlockID = other.BlockID;
      }
      if (other.BlockSize != 0F) {
        BlockSize = other.BlockSize;
      }
      dataNodeID_.Add(other.dataNodeID_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BlockID = input.ReadInt32();
            break;
          }
          case 21: {
            BlockSize = input.ReadFloat();
            break;
          }
          case 26: {
            dataNodeID_.AddEntriesFrom(input, _repeated_dataNodeID_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WriteResponse : pb::IMessage<WriteResponse> {
    private static readonly pb::MessageParser<WriteResponse> _parser = new pb::MessageParser<WriteResponse>(() => new WriteResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sufs.DataNodeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteResponse(WriteResponse other) : this() {
      response_ = other.response_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteResponse Clone() {
      return new WriteResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private bool response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Response {
      get { return response_; }
      set {
        response_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Response != false) hash ^= Response.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Response != false) {
        output.WriteRawTag(8);
        output.WriteBool(Response);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Response != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteResponse other) {
      if (other == null) {
        return;
      }
      if (other.Response != false) {
        Response = other.Response;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Response = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HealthRequest : pb::IMessage<HealthRequest> {
    private static readonly pb::MessageParser<HealthRequest> _parser = new pb::MessageParser<HealthRequest>(() => new HealthRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HealthRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sufs.DataNodeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthRequest(HealthRequest other) : this() {
      blockID_ = other.blockID_;
      blockSize_ = other.blockSize_;
      instruction_ = other.instruction_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthRequest Clone() {
      return new HealthRequest(this);
    }

    /// <summary>Field number for the "blockID" field.</summary>
    public const int BlockIDFieldNumber = 1;
    private int blockID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockID {
      get { return blockID_; }
      set {
        blockID_ = value;
      }
    }

    /// <summary>Field number for the "blockSize" field.</summary>
    public const int BlockSizeFieldNumber = 2;
    private float blockSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BlockSize {
      get { return blockSize_; }
      set {
        blockSize_ = value;
      }
    }

    /// <summary>Field number for the "instruction" field.</summary>
    public const int InstructionFieldNumber = 3;
    private bool instruction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Instruction {
      get { return instruction_; }
      set {
        instruction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HealthRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HealthRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockID != other.BlockID) return false;
      if (BlockSize != other.BlockSize) return false;
      if (Instruction != other.Instruction) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockID != 0) hash ^= BlockID.GetHashCode();
      if (BlockSize != 0F) hash ^= BlockSize.GetHashCode();
      if (Instruction != false) hash ^= Instruction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BlockID);
      }
      if (BlockSize != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BlockSize);
      }
      if (Instruction != false) {
        output.WriteRawTag(24);
        output.WriteBool(Instruction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockID);
      }
      if (BlockSize != 0F) {
        size += 1 + 4;
      }
      if (Instruction != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HealthRequest other) {
      if (other == null) {
        return;
      }
      if (other.BlockID != 0) {
        BlockID = other.BlockID;
      }
      if (other.BlockSize != 0F) {
        BlockSize = other.BlockSize;
      }
      if (other.Instruction != false) {
        Instruction = other.Instruction;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BlockID = input.ReadInt32();
            break;
          }
          case 21: {
            BlockSize = input.ReadFloat();
            break;
          }
          case 24: {
            Instruction = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HealthResponse : pb::IMessage<HealthResponse> {
    private static readonly pb::MessageParser<HealthResponse> _parser = new pb::MessageParser<HealthResponse>(() => new HealthResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HealthResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sufs.DataNodeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthResponse(HealthResponse other) : this() {
      response_ = other.response_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthResponse Clone() {
      return new HealthResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private bool response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Response {
      get { return response_; }
      set {
        response_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HealthResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HealthResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Response != false) hash ^= Response.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Response != false) {
        output.WriteRawTag(8);
        output.WriteBool(Response);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Response != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HealthResponse other) {
      if (other == null) {
        return;
      }
      if (other.Response != false) {
        Response = other.Response;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Response = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplicateRequest : pb::IMessage<ReplicateRequest> {
    private static readonly pb::MessageParser<ReplicateRequest> _parser = new pb::MessageParser<ReplicateRequest>(() => new ReplicateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sufs.DataNodeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicateRequest(ReplicateRequest other) : this() {
      blockID_ = other.blockID_;
      blockSize_ = other.blockSize_;
      dataNodeID_ = other.dataNodeID_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicateRequest Clone() {
      return new ReplicateRequest(this);
    }

    /// <summary>Field number for the "blockID" field.</summary>
    public const int BlockIDFieldNumber = 1;
    private int blockID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockID {
      get { return blockID_; }
      set {
        blockID_ = value;
      }
    }

    /// <summary>Field number for the "blockSize" field.</summary>
    public const int BlockSizeFieldNumber = 2;
    private float blockSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BlockSize {
      get { return blockSize_; }
      set {
        blockSize_ = value;
      }
    }

    /// <summary>Field number for the "dataNodeID" field.</summary>
    public const int DataNodeIDFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_dataNodeID_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> dataNodeID_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DataNodeID {
      get { return dataNodeID_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockID != other.BlockID) return false;
      if (BlockSize != other.BlockSize) return false;
      if(!dataNodeID_.Equals(other.dataNodeID_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockID != 0) hash ^= BlockID.GetHashCode();
      if (BlockSize != 0F) hash ^= BlockSize.GetHashCode();
      hash ^= dataNodeID_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BlockID);
      }
      if (BlockSize != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BlockSize);
      }
      dataNodeID_.WriteTo(output, _repeated_dataNodeID_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockID);
      }
      if (BlockSize != 0F) {
        size += 1 + 4;
      }
      size += dataNodeID_.CalculateSize(_repeated_dataNodeID_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicateRequest other) {
      if (other == null) {
        return;
      }
      if (other.BlockID != 0) {
        BlockID = other.BlockID;
      }
      if (other.BlockSize != 0F) {
        BlockSize = other.BlockSize;
      }
      dataNodeID_.Add(other.dataNodeID_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BlockID = input.ReadInt32();
            break;
          }
          case 21: {
            BlockSize = input.ReadFloat();
            break;
          }
          case 26: {
            dataNodeID_.AddEntriesFrom(input, _repeated_dataNodeID_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplicateResponse : pb::IMessage<ReplicateResponse> {
    private static readonly pb::MessageParser<ReplicateResponse> _parser = new pb::MessageParser<ReplicateResponse>(() => new ReplicateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sufs.DataNodeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicateResponse(ReplicateResponse other) : this() {
      response_ = other.response_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicateResponse Clone() {
      return new ReplicateResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private bool response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Response {
      get { return response_; }
      set {
        response_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Response != false) hash ^= Response.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Response != false) {
        output.WriteRawTag(8);
        output.WriteBool(Response);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Response != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicateResponse other) {
      if (other == null) {
        return;
      }
      if (other.Response != false) {
        Response = other.Response;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Response = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
