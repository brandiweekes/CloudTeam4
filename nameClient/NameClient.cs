// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nameClient.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sufs {

  /// <summary>Holder for reflection information generated from nameClient.proto</summary>
  public static partial class NameClientReflection {

    #region Descriptor
    /// <summary>File descriptor for nameClient.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NameClientReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBuYW1lQ2xpZW50LnByb3RvEgRzdWZzIkEKDUNyZWF0ZVJlcXVlc3QSEQoJ",
            "bnVtQmxvY2tzGAEgASgFEgsKA2RpchgCIAEoCRIQCghmaWxlTmFtZRgDIAEo",
            "CSJSCgtDcmVhdGVSZXBseRIPCgdibG9ja0lEGAIgASgFEhEKCXJlcEZhY3Rv",
            "chgDIAEoBRIMCgRETmlkGAQgAygJSgQIARACUgtibG9ja0lETGlzdDJICg5G",
            "aWxlTWFuYWdlbWVudBI2CgpDcmVhdGVGaWxlEhMuc3Vmcy5DcmVhdGVSZXF1",
            "ZXN0GhEuc3Vmcy5DcmVhdGVSZXBseSIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sufs.CreateRequest), global::Sufs.CreateRequest.Parser, new[]{ "NumBlocks", "Dir", "FileName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sufs.CreateReply), global::Sufs.CreateReply.Parser, new[]{ "BlockID", "RepFactor", "DNid" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CreateRequest : pb::IMessage<CreateRequest> {
    private static readonly pb::MessageParser<CreateRequest> _parser = new pb::MessageParser<CreateRequest>(() => new CreateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sufs.NameClientReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRequest(CreateRequest other) : this() {
      numBlocks_ = other.numBlocks_;
      dir_ = other.dir_;
      fileName_ = other.fileName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRequest Clone() {
      return new CreateRequest(this);
    }

    /// <summary>Field number for the "numBlocks" field.</summary>
    public const int NumBlocksFieldNumber = 1;
    private int numBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumBlocks {
      get { return numBlocks_; }
      set {
        numBlocks_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 2;
    private string dir_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dir {
      get { return dir_; }
      set {
        dir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 3;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumBlocks != other.NumBlocks) return false;
      if (Dir != other.Dir) return false;
      if (FileName != other.FileName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumBlocks != 0) hash ^= NumBlocks.GetHashCode();
      if (Dir.Length != 0) hash ^= Dir.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumBlocks != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumBlocks);
      }
      if (Dir.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Dir);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FileName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumBlocks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumBlocks);
      }
      if (Dir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dir);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRequest other) {
      if (other == null) {
        return;
      }
      if (other.NumBlocks != 0) {
        NumBlocks = other.NumBlocks;
      }
      if (other.Dir.Length != 0) {
        Dir = other.Dir;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumBlocks = input.ReadInt32();
            break;
          }
          case 18: {
            Dir = input.ReadString();
            break;
          }
          case 26: {
            FileName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateReply : pb::IMessage<CreateReply> {
    private static readonly pb::MessageParser<CreateReply> _parser = new pb::MessageParser<CreateReply>(() => new CreateReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sufs.NameClientReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateReply(CreateReply other) : this() {
      blockID_ = other.blockID_;
      repFactor_ = other.repFactor_;
      dNid_ = other.dNid_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateReply Clone() {
      return new CreateReply(this);
    }

    /// <summary>Field number for the "blockID" field.</summary>
    public const int BlockIDFieldNumber = 2;
    private int blockID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockID {
      get { return blockID_; }
      set {
        blockID_ = value;
      }
    }

    /// <summary>Field number for the "repFactor" field.</summary>
    public const int RepFactorFieldNumber = 3;
    private int repFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RepFactor {
      get { return repFactor_; }
      set {
        repFactor_ = value;
      }
    }

    /// <summary>Field number for the "DNid" field.</summary>
    public const int DNidFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_dNid_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> dNid_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DNid {
      get { return dNid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockID != other.BlockID) return false;
      if (RepFactor != other.RepFactor) return false;
      if(!dNid_.Equals(other.dNid_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockID != 0) hash ^= BlockID.GetHashCode();
      if (RepFactor != 0) hash ^= RepFactor.GetHashCode();
      hash ^= dNid_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BlockID);
      }
      if (RepFactor != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RepFactor);
      }
      dNid_.WriteTo(output, _repeated_dNid_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockID);
      }
      if (RepFactor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RepFactor);
      }
      size += dNid_.CalculateSize(_repeated_dNid_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateReply other) {
      if (other == null) {
        return;
      }
      if (other.BlockID != 0) {
        BlockID = other.BlockID;
      }
      if (other.RepFactor != 0) {
        RepFactor = other.RepFactor;
      }
      dNid_.Add(other.dNid_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            BlockID = input.ReadInt32();
            break;
          }
          case 24: {
            RepFactor = input.ReadInt32();
            break;
          }
          case 34: {
            dNid_.AddEntriesFrom(input, _repeated_dNid_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
