// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nameNode.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sufs {

  /// <summary>Holder for reflection information generated from nameNode.proto</summary>
  public static partial class NameNodeReflection {

    #region Descriptor
    /// <summary>File descriptor for nameNode.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NameNodeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5uYW1lTm9kZS5wcm90bxIEc3VmcyJBCg1DcmVhdGVSZXF1ZXN0EhEKCW51",
            "bUJsb2NrcxgBIAEoBRILCgNkaXIYAiABKAkSEAoIZmlsZU5hbWUYAyABKAki",
            "VQoOQ3JlYXRlUmVzcG9uc2USDwoHYmxvY2tJRBgCIAEoBRIRCglyZXBGYWN0",
            "b3IYAyABKAUSDAoERE5pZBgEIAMoCUoECAEQAlILYmxvY2tJRExpc3QiIgoE",
            "UGFpchILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAUiPgoNUmVwb3J0UmVx",
            "dWVzdBIMCgRETmlkGAEgASgJEh8KC2Jsb2NrSURMaXN0GAIgAygLMgouc3Vm",
            "cy5QYWlyIiYKDlJlcG9ydFJlc3BvbnNlEhQKDGFja25vd2xlZGdlZBgBIAEo",
            "CCIZCglIQnJlcXVlc3QSDAoERE5pZBgBIAEoCSIiCgpIQnJlc3BvbnNlEhQK",
            "DGFja25vd2xlZGdlZBgBIAEoCDJLCg5GaWxlTWFuYWdlbWVudBI5CgpDcmVh",
            "dGVGaWxlEhMuc3Vmcy5DcmVhdGVSZXF1ZXN0GhQuc3Vmcy5DcmVhdGVSZXNw",
            "b25zZSIAMk0KD0Jsb2NrTWFuYWdlbWVudBI6CgtCbG9ja1JlcG9ydBITLnN1",
            "ZnMuUmVwb3J0UmVxdWVzdBoULnN1ZnMuUmVwb3J0UmVzcG9uc2UiADJCCglI",
            "ZWFydGJlYXQSNQoOSGVhcnRiZWF0Q2hlY2sSDy5zdWZzLkhCcmVxdWVzdBoQ",
            "LnN1ZnMuSEJyZXNwb25zZSIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sufs.CreateRequest), global::Sufs.CreateRequest.Parser, new[]{ "NumBlocks", "Dir", "FileName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sufs.CreateResponse), global::Sufs.CreateResponse.Parser, new[]{ "BlockID", "RepFactor", "DNid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sufs.Pair), global::Sufs.Pair.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sufs.ReportRequest), global::Sufs.ReportRequest.Parser, new[]{ "DNid", "BlockIDList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sufs.ReportResponse), global::Sufs.ReportResponse.Parser, new[]{ "Acknowledged" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sufs.HBrequest), global::Sufs.HBrequest.Parser, new[]{ "DNid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sufs.HBresponse), global::Sufs.HBresponse.Parser, new[]{ "Acknowledged" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CreateRequest : pb::IMessage<CreateRequest> {
    private static readonly pb::MessageParser<CreateRequest> _parser = new pb::MessageParser<CreateRequest>(() => new CreateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sufs.NameNodeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRequest(CreateRequest other) : this() {
      numBlocks_ = other.numBlocks_;
      dir_ = other.dir_;
      fileName_ = other.fileName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRequest Clone() {
      return new CreateRequest(this);
    }

    /// <summary>Field number for the "numBlocks" field.</summary>
    public const int NumBlocksFieldNumber = 1;
    private int numBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumBlocks {
      get { return numBlocks_; }
      set {
        numBlocks_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 2;
    private string dir_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dir {
      get { return dir_; }
      set {
        dir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 3;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumBlocks != other.NumBlocks) return false;
      if (Dir != other.Dir) return false;
      if (FileName != other.FileName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumBlocks != 0) hash ^= NumBlocks.GetHashCode();
      if (Dir.Length != 0) hash ^= Dir.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumBlocks != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumBlocks);
      }
      if (Dir.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Dir);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FileName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumBlocks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumBlocks);
      }
      if (Dir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dir);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRequest other) {
      if (other == null) {
        return;
      }
      if (other.NumBlocks != 0) {
        NumBlocks = other.NumBlocks;
      }
      if (other.Dir.Length != 0) {
        Dir = other.Dir;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumBlocks = input.ReadInt32();
            break;
          }
          case 18: {
            Dir = input.ReadString();
            break;
          }
          case 26: {
            FileName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateResponse : pb::IMessage<CreateResponse> {
    private static readonly pb::MessageParser<CreateResponse> _parser = new pb::MessageParser<CreateResponse>(() => new CreateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sufs.NameNodeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateResponse(CreateResponse other) : this() {
      blockID_ = other.blockID_;
      repFactor_ = other.repFactor_;
      dNid_ = other.dNid_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateResponse Clone() {
      return new CreateResponse(this);
    }

    /// <summary>Field number for the "blockID" field.</summary>
    public const int BlockIDFieldNumber = 2;
    private int blockID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockID {
      get { return blockID_; }
      set {
        blockID_ = value;
      }
    }

    /// <summary>Field number for the "repFactor" field.</summary>
    public const int RepFactorFieldNumber = 3;
    private int repFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RepFactor {
      get { return repFactor_; }
      set {
        repFactor_ = value;
      }
    }

    /// <summary>Field number for the "DNid" field.</summary>
    public const int DNidFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_dNid_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> dNid_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DNid {
      get { return dNid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockID != other.BlockID) return false;
      if (RepFactor != other.RepFactor) return false;
      if(!dNid_.Equals(other.dNid_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockID != 0) hash ^= BlockID.GetHashCode();
      if (RepFactor != 0) hash ^= RepFactor.GetHashCode();
      hash ^= dNid_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BlockID);
      }
      if (RepFactor != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RepFactor);
      }
      dNid_.WriteTo(output, _repeated_dNid_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockID);
      }
      if (RepFactor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RepFactor);
      }
      size += dNid_.CalculateSize(_repeated_dNid_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateResponse other) {
      if (other == null) {
        return;
      }
      if (other.BlockID != 0) {
        BlockID = other.BlockID;
      }
      if (other.RepFactor != 0) {
        RepFactor = other.RepFactor;
      }
      dNid_.Add(other.dNid_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            BlockID = input.ReadInt32();
            break;
          }
          case 24: {
            RepFactor = input.ReadInt32();
            break;
          }
          case 34: {
            dNid_.AddEntriesFrom(input, _repeated_dNid_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pair : pb::IMessage<Pair> {
    private static readonly pb::MessageParser<Pair> _parser = new pb::MessageParser<Pair>(() => new Pair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sufs.NameNodeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair(Pair other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair Clone() {
      return new Pair(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pair other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportRequest : pb::IMessage<ReportRequest> {
    private static readonly pb::MessageParser<ReportRequest> _parser = new pb::MessageParser<ReportRequest>(() => new ReportRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sufs.NameNodeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRequest(ReportRequest other) : this() {
      dNid_ = other.dNid_;
      blockIDList_ = other.blockIDList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRequest Clone() {
      return new ReportRequest(this);
    }

    /// <summary>Field number for the "DNid" field.</summary>
    public const int DNidFieldNumber = 1;
    private string dNid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DNid {
      get { return dNid_; }
      set {
        dNid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "blockIDList" field.</summary>
    public const int BlockIDListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sufs.Pair> _repeated_blockIDList_codec
        = pb::FieldCodec.ForMessage(18, global::Sufs.Pair.Parser);
    private readonly pbc::RepeatedField<global::Sufs.Pair> blockIDList_ = new pbc::RepeatedField<global::Sufs.Pair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sufs.Pair> BlockIDList {
      get { return blockIDList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DNid != other.DNid) return false;
      if(!blockIDList_.Equals(other.blockIDList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DNid.Length != 0) hash ^= DNid.GetHashCode();
      hash ^= blockIDList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DNid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DNid);
      }
      blockIDList_.WriteTo(output, _repeated_blockIDList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DNid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DNid);
      }
      size += blockIDList_.CalculateSize(_repeated_blockIDList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportRequest other) {
      if (other == null) {
        return;
      }
      if (other.DNid.Length != 0) {
        DNid = other.DNid;
      }
      blockIDList_.Add(other.blockIDList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DNid = input.ReadString();
            break;
          }
          case 18: {
            blockIDList_.AddEntriesFrom(input, _repeated_blockIDList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportResponse : pb::IMessage<ReportResponse> {
    private static readonly pb::MessageParser<ReportResponse> _parser = new pb::MessageParser<ReportResponse>(() => new ReportResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sufs.NameNodeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportResponse(ReportResponse other) : this() {
      acknowledged_ = other.acknowledged_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportResponse Clone() {
      return new ReportResponse(this);
    }

    /// <summary>Field number for the "acknowledged" field.</summary>
    public const int AcknowledgedFieldNumber = 1;
    private bool acknowledged_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Acknowledged {
      get { return acknowledged_; }
      set {
        acknowledged_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Acknowledged != other.Acknowledged) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Acknowledged != false) hash ^= Acknowledged.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Acknowledged != false) {
        output.WriteRawTag(8);
        output.WriteBool(Acknowledged);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Acknowledged != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportResponse other) {
      if (other == null) {
        return;
      }
      if (other.Acknowledged != false) {
        Acknowledged = other.Acknowledged;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Acknowledged = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HBrequest : pb::IMessage<HBrequest> {
    private static readonly pb::MessageParser<HBrequest> _parser = new pb::MessageParser<HBrequest>(() => new HBrequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HBrequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sufs.NameNodeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HBrequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HBrequest(HBrequest other) : this() {
      dNid_ = other.dNid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HBrequest Clone() {
      return new HBrequest(this);
    }

    /// <summary>Field number for the "DNid" field.</summary>
    public const int DNidFieldNumber = 1;
    private string dNid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DNid {
      get { return dNid_; }
      set {
        dNid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HBrequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HBrequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DNid != other.DNid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DNid.Length != 0) hash ^= DNid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DNid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DNid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DNid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DNid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HBrequest other) {
      if (other == null) {
        return;
      }
      if (other.DNid.Length != 0) {
        DNid = other.DNid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DNid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HBresponse : pb::IMessage<HBresponse> {
    private static readonly pb::MessageParser<HBresponse> _parser = new pb::MessageParser<HBresponse>(() => new HBresponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HBresponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sufs.NameNodeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HBresponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HBresponse(HBresponse other) : this() {
      acknowledged_ = other.acknowledged_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HBresponse Clone() {
      return new HBresponse(this);
    }

    /// <summary>Field number for the "acknowledged" field.</summary>
    public const int AcknowledgedFieldNumber = 1;
    private bool acknowledged_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Acknowledged {
      get { return acknowledged_; }
      set {
        acknowledged_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HBresponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HBresponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Acknowledged != other.Acknowledged) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Acknowledged != false) hash ^= Acknowledged.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Acknowledged != false) {
        output.WriteRawTag(8);
        output.WriteBool(Acknowledged);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Acknowledged != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HBresponse other) {
      if (other == null) {
        return;
      }
      if (other.Acknowledged != false) {
        Acknowledged = other.Acknowledged;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Acknowledged = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
